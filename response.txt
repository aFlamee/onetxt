

=== ui.py ===
import tkinter as tk
from tkinter import ttk, filedialog
import subprocess
import os
import sys
import webbrowser

from onetxt import run_onetxt
from utils.presets import PRESET_IGNORES, DEFAULT_IGNORE_KEYWORDS, HIDDEN_IGNORE_KEYWORDS, NON_HIDDEN_IGNORE_KEYWORDS

root = None
style = None
path_var = None
custom_ignore_var = None
preset_var = None
preset_info_label = None
status_label = None
btn_clipboard = None
btn_vscode = None
open_button = None
theme_var = None
entry_ignore = None
feedback_bar = None

PLACEHOLDER_IGNORE = "E.g. .env, secrets"
default_ignore_vars = {}
ignore_all_hidden_var = None
hidden_checkboxes = []

def open_donation_link():
    webbrowser.open("https://buymeacoffee.com/flameeey")

def open_donation_link_paypal():
    webbrowser.open("https://paypal.me/flameeey")

def set_status(msg):
    status_label.config(text=msg)

def set_buttons_state(state):
    btn_clipboard.config(state=state)
    btn_vscode.config(state=state)
    open_button.config(state=state)

def hide_feedback():
    status_label.config(text="")
    feedback_bar.pack_forget()

def animate_feedback_bar(value):
    if value <= 100:
        feedback_bar["value"] = value
        root.after(30, animate_feedback_bar, value + 1)
    else:
        root.after(1000, hide_feedback)

def show_executed_feedback():
    set_status("Script executed.")
    feedback_bar["value"] = 0
    feedback_bar.pack(pady=(0, 10))
    animate_feedback_bar(0)

def select_directory():
    folder = filedialog.askdirectory(initialdir=os.path.expanduser("~"))
    if folder:
        path_var.set(folder)

def update_preset_label(*_):
    preset = preset_var.get()
    ignores = PRESET_IGNORES.get(preset, [])
    text = f"Ignored by {preset}:\n{', '.join(ignores)}" if ignores else "No specific ignores."
    preset_info_label.config(text=text)

def run_script():
    set_buttons_state(tk.DISABLED)
    p = path_var.get().strip()
    txt = custom_ignore_var.get().strip()
    user_ignores = []
    
    # Add hidden files pattern if enabled
    if ignore_all_hidden_var.get():
        user_ignores.append(".*")
    
    if txt and txt != PLACEHOLDER_IGNORE:
        user_ignores = [x.strip() for x in txt.split(',') if x.strip()]
    user_ignores += PRESET_IGNORES.get(preset_var.get(), [])
    for kw, var in default_ignore_vars.items():
        if var.get():
            user_ignores.append(kw)
    if p:
        try:
            run_onetxt(p, user_ignores)
            show_executed_feedback()
            set_buttons_state(tk.NORMAL)
        except subprocess.CalledProcessError as e:
            set_status(f"Error: {e}")
    else:
        set_status("Please select a directory first.")

def get_response_file():
    p = path_var.get().strip()
    if not p:
        set_status("No directory selected.")
        return None, None
    out_file = os.path.join(p, "response.txt")
    if not os.path.exists(out_file):
        set_status("No 'response.txt' found.")
        return p, None
    return p, out_file

def open_output_file():
    p, out_file = get_response_file()
    if not out_file:
        return
    if sys.platform.startswith("darwin"):
        subprocess.run(["open", out_file])
    elif os.name == "nt":
        os.startfile(out_file)
    else:
        subprocess.run(["xdg-open", out_file])

def open_response_in_vscode():
    p, out_file = get_response_file()
    if not out_file:
        return
    try:
        subprocess.run(["code", out_file], check=True)
    except FileNotFoundError:
        set_status("VSCode not found or 'code' command not in PATH.")
    except subprocess.CalledProcessError as e:
        set_status(f"Error opening in VSCode: {e}")

def copy_response_to_clipboard():
    p, out_file = get_response_file()
    if not out_file:
        return
    try:
        with open(out_file, "r", encoding="utf-8") as f:
            content = f.read()
        root.clipboard_clear()
        root.clipboard_append(content)
        set_status("response.txt content copied to clipboard.")
    except Exception as e:
        set_status(f"Error copying file content: {e}")

def create_ignore_checkbuttons(parent_frame):
    global ignore_all_hidden_var, hidden_checkboxes, default_ignore_vars
    frame = ttk.Frame(parent_frame)
    frame.pack(fill="x", pady=(10, 15), anchor="w")

    # "Ignore all hidden" checkbox
    ignore_all_hidden_var = tk.BooleanVar(value=False)
    cbtn_all_hidden = ttk.Checkbutton(
        frame,
        text="Ignore all hidden files and directories (starting with .)",
        variable=ignore_all_hidden_var,
        style="Modern.TCheckbutton"
    )
    cbtn_all_hidden.pack(anchor="w", pady=(0, 10))

    # Hidden files section
    hidden_label = ttk.Label(frame, text="Common hidden files/directories:")
    hidden_label.pack(anchor="w", pady=(0, 5))
    
    hidden_frame = ttk.Frame(frame)
    hidden_frame.pack(anchor="w", fill="x", pady=(0, 10))
    
    cols = 5
    for index, kw in enumerate(HIDDEN_IGNORE_KEYWORDS):
        var = tk.BooleanVar(value=True)
        default_ignore_vars[kw] = var
        check_frame = ttk.Frame(hidden_frame, padding=5, relief="ridge")
        check_frame.grid(row=index//cols, column=index%cols, padx=10, pady=5, sticky="w")
        cbtn = ttk.Checkbutton(check_frame, text=kw, variable=var, style="Modern.TCheckbutton")
        cbtn.pack(side="left", padx=5, pady=2)
        hidden_checkboxes.append(cbtn)

    # Non-hidden files section
    non_hidden_label = ttk.Label(frame, text="Other common files/directories:")
    non_hidden_label.pack(anchor="w", pady=(10, 5))
    
    non_hidden_frame = ttk.Frame(frame)
    non_hidden_frame.pack(anchor="w", fill="x")
    
    for index, kw in enumerate(NON_HIDDEN_IGNORE_KEYWORDS):
        var = tk.BooleanVar(value=True)
        default_ignore_vars[kw] = var
        check_frame = ttk.Frame(non_hidden_frame, padding=5, relief="ridge")
        check_frame.grid(row=index//cols, column=index%cols, padx=10, pady=5, sticky="w")
        ttk.Checkbutton(check_frame, text=kw, variable=var, style="Modern.TCheckbutton").pack(side="left", padx=5, pady=2)

    # Toggle hidden checkboxes state
    def toggle_hidden_cb(*_):
        state = tk.NORMAL if not ignore_all_hidden_var.get() else tk.DISABLED
        for cb in hidden_checkboxes:
            cb.configure(state=state)
    
    ignore_all_hidden_var.trace_add("write", toggle_hidden_cb)
    return frame

def apply_styles():
    style.theme_use("clam")

    style.configure(
        "Modern.TCheckbutton",
        font=("Helvetica", 10, "bold"),
        background="#2e2e2e",
        foreground="white",
        padding=5,
        borderwidth=2,
        relief="flat"
    )
    style.map("Modern.TCheckbutton",
              background=[("active", "#555555"), ("!disabled", "#444444")],
              foreground=[("active", "#ffffff"), ("!disabled", "#dddddd")])

    style.configure(
        "Bmac.TButton",
        background="#FFDBB5",
        foreground="black",
        borderwidth=0,
        relief="flat"
    )
    style.map("Bmac.TButton",
              background=[
                  ("active", "#FFEAC5"),
                  ("pressed", "#FFB000"),
                  ("disabled", "#dddddd")
              ],
              foreground=[("active", "black"), ("disabled", "gray")])

    style.configure(
        "PayPal.TButton",
        background="#0070BA",
        foreground="white",
        borderwidth=0,
        relief="flat"
    )
    style.map("PayPal.TButton",
              background=[
                  ("active", "#005EA6"),
                  ("pressed", "#004885"),
                  ("disabled", "#dddddd")
              ],
              foreground=[("active", "white"), ("disabled", "gray")])

def apply_dark_theme():
    style.theme_use("clam")
    root.configure(bg="#1c1c1c")
    style.configure("Custom.TCheckbutton",
                    background="#1c1c1c", foreground="white",
                    borderwidth=0, highlightthickness=0, relief="flat")
    style.configure("TLabel",
                    background="#1c1c1c", foreground="white",
                    borderwidth=0, relief="flat")
    style.configure("TFrame", background="#1c1c1c")
    style.configure("TEntry",
                    fieldbackground="#3a3a3a", foreground="white",
                    borderwidth=0, relief="flat")
    style.configure("Feedback.Horizontal.TProgressbar",
                    thickness=3,
                    troughcolor="#1c1c1c",
                    background="yellow",
                    bordercolor="#1c1c1c")
    style.configure("TButton",
                    foreground="black",
                    borderwidth=0, relief="flat")
    style.map("TButton",
              background=[
                  ("disabled", "#666666"),
                  ("active", "#e6b800"),
                  ("pressed", "#d6a600"),
                  ("!disabled", "#f0c400")
              ],
              foreground=[
                  ("disabled", "white"),
                  ("active", "black"),
                  ("!disabled", "black")
              ])
    style.configure("TCombobox",
                    fieldbackground="#3a3a3a", foreground="white",
                    borderwidth=0, relief="flat")
    style.map("TCombobox",
              foreground=[("readonly", "white"), ("disabled", "#888")],
              background=[("readonly", "#3a3a3a"), ("disabled", "#3a3a3a")])
    style.configure("Custom.TRadiobutton",
                    background="#1c1c1c", foreground="white",
                    borderwidth=0, highlightthickness=0, relief="flat")
    style.map("Custom.TRadiobutton",
              background=[("active", "#3a3a3a")],
              foreground=[("active", "white")])
    status_label.config(foreground="yellow")
    preset_info_label.config(foreground="yellow")

def apply_light_theme():
    style.theme_use("clam")
    root.configure(bg="#f2f2f2")
    style.configure("Custom.TCheckbutton",
                    background="#f2f2f2", foreground="black",
                    borderwidth=0, highlightthickness=0, relief="flat")
    style.configure("TLabel",
                    background="#f2f2f2", foreground="black",
                    borderwidth=0, relief="flat")
    style.configure("TFrame", background="#f2f2f2")
    style.configure("TEntry",
                    fieldbackground="white", foreground="black",
                    borderwidth=0, relief="flat")
    style.configure("Feedback.Horizontal.TProgressbar",
                    thickness=3,
                    troughcolor="#f2f2f2",
                    background="yellow",
                    bordercolor="#f2f2f2")
    style.configure("TButton",
                    foreground="white",
                    borderwidth=0, relief="flat")
    style.map("TButton",
              background=[
                  ("disabled", "#dddddd"),
                  ("active", "#0052cc"),
                  ("pressed", "#003d99"),
                  ("!disabled", "#007bff")
              ],
              foreground=[
                  ("disabled", "black"),
                  ("active", "white"),
                  ("!disabled", "white")
              ])
    style.configure("TCombobox",
                    fieldbackground="white", foreground="black",
                    borderwidth=0, relief="flat")
    style.map("TCombobox",
              foreground=[("readonly", "black"), ("disabled", "#666")],
              background=[("readonly", "#f2f2f2"), ("disabled", "#f2f2f2")])
    style.configure("Custom.TRadiobutton",
                    background="#f2f2f2", foreground="black",
                    borderwidth=0, highlightthickness=0, relief="flat")
    style.map("Custom.TRadiobutton",
              background=[("active", "#cccccc")],
              foreground=[("active", "black")])
    status_label.config(foreground="blue")
    preset_info_label.config(foreground="blue")

def switch_theme():
    if theme_var.get() == "Dark":
        apply_dark_theme()
    else:
        apply_light_theme()

def on_ignore_focus_in(_):
    if custom_ignore_var.get() == PLACEHOLDER_IGNORE:
        entry_ignore.delete(0, "end")
        if theme_var.get() == "Dark":
            entry_ignore.config(foreground="white")
        else:
            entry_ignore.config(foreground="black")

def on_ignore_focus_out(_):
    if not custom_ignore_var.get():
        entry_ignore.insert(0, PLACEHOLDER_IGNORE)
        entry_ignore.config(foreground="#888")

def run_ui():
    global root, style
    global path_var, custom_ignore_var, preset_var
    global preset_info_label, status_label
    global btn_clipboard, btn_vscode, open_button
    global theme_var, entry_ignore
    global feedback_bar

    root = tk.Tk()
    root.title("aFlamee - OneTXT - Directory -> text")
    root.geometry("750x650")
    root.resizable(True, True)

    style = ttk.Style(root)
    style.theme_use("clam")

    apply_styles()

    heading_frame = ttk.Frame(root, padding="10")
    heading_frame.pack(fill="x")
    lbl_heading = ttk.Label(heading_frame, text="Welcome to OneTXT!", font=("Helvetica", 14, "bold"))
    lbl_heading.pack(side="left")

    theme_var = tk.StringVar(value="Dark")
    theme_switch_frame = ttk.Frame(heading_frame)
    theme_switch_frame.pack(side="right")
    ttk.Label(theme_switch_frame, text="Theme:").pack(side="left", padx=(0,5))

    dark_rb = ttk.Radiobutton(theme_switch_frame, text="Dark", variable=theme_var, value="Dark",
                              command=switch_theme, takefocus=False, style="Custom.TRadiobutton")
    dark_rb.pack(side="left", padx=5)
    light_rb = ttk.Radiobutton(theme_switch_frame, text="White", variable=theme_var, value="White",
                               command=switch_theme, takefocus=False, style="Custom.TRadiobutton")
    light_rb.pack(side="left", padx=5)

    main_frame = ttk.Frame(root, padding="10")
    main_frame.pack(fill="both", expand=True)

    note_label = ttk.Label(main_frame, text="Note: .gitignore and .dockerignore are also used by default.")
    note_label.pack(anchor="w", pady=(0,10))

    dir_frame = ttk.Frame(main_frame)
    dir_frame.pack(fill="x", pady=5)
    ttk.Label(dir_frame, text="Select Directory:").pack(side="left", padx=(0,5))
    path_var = tk.StringVar()
    entry_path = ttk.Entry(dir_frame, textvariable=path_var, width=40)
    entry_path.pack(side="left", expand=True, fill="x")
    b_browse = ttk.Button(dir_frame, text="Browse", command=select_directory)
    b_browse.pack(side="left", padx=5)

    default_box = ttk.LabelFrame(main_frame, text="Default Ignores (Check/Uncheck as you like)", padding=10)
    default_box.pack(fill="x", pady=(10, 15), anchor="w")
    create_ignore_checkbuttons(default_box)

    preset_frame = ttk.Frame(main_frame)
    preset_frame.pack(fill="x", pady=5)
    ttk.Label(preset_frame, text="Technology Preset:").pack(side="left", padx=(0,5))
    preset_var = tk.StringVar(value="No Preset")
    combo_presets = ttk.Combobox(preset_frame, textvariable=preset_var, values=list(PRESET_IGNORES.keys()),
                                 width=20, state="readonly")
    combo_presets.pack(side="left")
    combo_presets.bind("<<ComboboxSelected>>", update_preset_label)

    preset_info_label = ttk.Label(main_frame, text="No specific ignores.", wraplength=560)
    preset_info_label.pack(pady=(5,0))

    ttk.Label(main_frame, text="Additional Ignores (File & Directory) (comma-separated):").pack(anchor="w", pady=(15,0))
    custom_ignore_var = tk.StringVar()
    entry_ignore = ttk.Entry(main_frame, textvariable=custom_ignore_var, width=40)
    entry_ignore.pack(anchor="w")
    entry_ignore.insert(0, PLACEHOLDER_IGNORE)
    entry_ignore.config(foreground="#888")
    entry_ignore.bind("<FocusIn>", on_ignore_focus_in)
    entry_ignore.bind("<FocusOut>", on_ignore_focus_out)

    btn_frame = ttk.Frame(main_frame)
    btn_frame.pack(fill="x", pady=15)
    b_run = ttk.Button(btn_frame, text="Run Script", command=run_script)
    b_run.pack(side="left")

    btn_clipboard = ttk.Button(btn_frame, text="Copy to Clipboard", command=copy_response_to_clipboard, state=tk.DISABLED)
    btn_clipboard.pack(side="left", padx=5)

    btn_vscode = ttk.Button(btn_frame, text="Open in VSCode", command=open_response_in_vscode, state=tk.DISABLED)
    btn_vscode.pack(side="left", padx=5)

    open_button = ttk.Button(btn_frame, text="Open response.txt", command=open_output_file, state=tk.DISABLED)
    open_button.pack(side="left", padx=5)

    # Donation frame (placed after the main action buttons, not at the bottom)
    support_frame = ttk.Frame(main_frame)
    support_frame.pack(anchor="e", pady=(0, 10))

    b_bmac = ttk.Button(
        support_frame,
        text="☕️ Buy Me a Coffee",
        style="Bmac.TButton",
        command=open_donation_link
    )
    b_bmac.pack(side="left", padx=(0,10))

    b_paypal = ttk.Button(
        support_frame,
        text="🅿 Donate via PayPal",
        style="PayPal.TButton",
        command=open_donation_link_paypal
    )
    b_paypal.pack(side="left")

    status_label = ttk.Label(main_frame, text="")
    status_label.pack(anchor="w")

    feedback_bar = ttk.Progressbar(main_frame,
                                   style="Feedback.Horizontal.TProgressbar",
                                   orient="horizontal",
                                   mode="determinate",
                                   maximum=100,
                                   value=0)
    feedback_bar.pack_forget()

    update_preset_label()
    apply_dark_theme()
    root.mainloop()



=== main.py ===
from ui import run_ui

if __name__ == "__main__":
    run_ui()



=== onetxt.py ===
import os
import fnmatch
from utils.ignore_patterns import load_ignore_patterns, is_ignored_by_patterns

def load_gitignore_patterns_from_hierarchy(current_path, base_dir):
    patterns = []
    current_dir = os.path.dirname(current_path)
    
    # Traverse up from current directory to base_dir
    while True:
        gitignore_path = os.path.join(current_dir, '.gitignore')
        if os.path.isfile(gitignore_path):
            patterns += load_ignore_patterns(gitignore_path)
        
        if current_dir == base_dir:
            break
        current_dir = os.path.dirname(current_dir)

    # .dockerignore only in root-dir
    dockerignore_path = os.path.join(base_dir, '.dockerignore')
    if os.path.isfile(dockerignore_path):
        patterns += load_ignore_patterns(dockerignore_path)
    
    return patterns

def should_ignore(path, base_dir, user_ignores):
    ignore_patterns = user_ignores.copy()
    
    # Load all .gitignore and .dockerignore patterns from hierarchy
    ignore_patterns += load_gitignore_patterns_from_hierarchy(path, base_dir)
    
    relative_path = os.path.relpath(path, base_dir)
    return is_ignored_by_patterns(relative_path, ignore_patterns)

def process_directory(base_dir, user_ignores):
    output = []
    total_files = 0
    ignored_files = 0
    
    for root, dirs, files in os.walk(base_dir, topdown=True):
        # Process files first
        for filename in files:
            file_path = os.path.join(root, filename)
            if should_ignore(file_path, base_dir, user_ignores):
                ignored_files += 1
                continue
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                output.append(f"\n\n=== {os.path.relpath(file_path, base_dir)} ===\n{content}")
                total_files += 1
            except Exception as e:
                continue
        
        # Modify dirs in-place to skip ignored directories
        dirs[:] = [d for d in dirs if not should_ignore(os.path.join(root, d), base_dir, user_ignores)]
    
    return {
        'content': '\n'.join(output),
        'stats': {
            'total_files': total_files,
            'ignored_files': ignored_files,
            'total_size': len(''.join(output))
        }
    }

def run_onetxt(base_dir, user_ignores):
    user_ignores = user_ignores.copy()
    user_ignores.append('response.txt')

    result = process_directory(base_dir, user_ignores)
    output_file = os.path.join(base_dir, 'response.txt')
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(result['content'])
    
    print(f"Processed {result['stats']['total_files']} files "
          f"(ignored {result['stats']['ignored_files']})")
    return output_file


=== utils/ignore_patterns.py ===
import os
import fnmatch

def load_ignore_patterns(ignore_file_path):
    patterns = []
    if os.path.isfile(ignore_file_path):
        with open(ignore_file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    if line.endswith('/'):
                        line = line[:-1]
                    patterns.append(line)
    return patterns

def is_ignored_by_patterns(relative_path, ignore_patterns):
    for pattern in ignore_patterns:
        if fnmatch.fnmatch(relative_path, pattern):
            return True
        if fnmatch.fnmatch(os.path.basename(relative_path), pattern):
            return True
    return False


=== utils/presets.py ===
PRESET_IGNORES = {
    "No Preset": [],
    "NextJs": [
        "node_modules", ".next", "package-lock.json", "yarn.lock",
        "pnpm-lock.yaml", "bun.lockb"
    ],
    "SvelteKit": [
        "node_modules", ".svelte-kit", "package-lock.json", "yarn.lock",
        "pnpm-lock.yaml", "bun.lockb"
    ],
    "React": [
        "node_modules", "build", "package-lock.json", "yarn.lock",
        "pnpm-lock.yaml", "bun.lockb"
    ],
    "Ruby on Rails": [
        "tmp", "log", "vendor", "coverage", "node_modules",
        "Gemfile.lock", "package-lock.json", "yarn.lock",
        "pnpm-lock.yaml", "bun.lockb", "assets", ".rubocop.yml",
        ".ruby-version"
    ],
    "Angular": [
        "node_modules", "dist", ".angular",
        "package-lock.json", "yarn.lock",
        "pnpm-lock.yaml", "bun.lockb"
    ]
}

DEFAULT_IGNORE_KEYWORDS = [
    ".github",".git","tmp", "cache", "bin", "build", "dist", "out", "logs", "README.md",
    "node_modules", "venv", ".venv", "__pycache__", ".idea", ".vscode", ".gitignore"
]

HIDDEN_IGNORE_KEYWORDS = [
    ".github", ".git", ".gitignore", ".idea", ".vscode", ".env",
    ".dockerignore", ".DS_Store", ".npmignore", ".yarn", ".ruby-version"
]

NON_HIDDEN_IGNORE_KEYWORDS = [
    "tmp", "cache", "bin", "build", "dist", "out", "logs", "README.md",
    "node_modules", "venv", ".venv", "__pycache__"
]



=== utils/__init__.py ===
